<jslint><file name='/home/templth/work/workspaces/restlet/restlet-creator/ws-restlet-js/org.restlet.js/target/browser/restlet-browser.js'>
<issue line='6' char='9' reason='Expected &apos;!==&apos; and instead saw &apos;!=&apos;.' evidence='		if (elt != &quot;initialize&quot; || typeof obj1[elt] != &quot;function&quot;) {'/>
<issue line='6' char='45' reason='Expected &apos;!==&apos; and instead saw &apos;!=&apos;.' evidence='		if (elt != &quot;initialize&quot; || typeof obj1[elt] != &quot;function&quot;) {'/>
<issue line='9' char='9' reason='Missing space between &apos;_&apos; and &apos;+&apos;.' evidence='			obj2[&quot;_&quot;+elt] = obj1[elt];'/>
<issue line='9' char='10' reason='Missing space between &apos;+&apos; and &apos;elt&apos;.' evidence='			obj2[&quot;_&quot;+elt] = obj1[elt];'/>
<issue line='5' char='1' reason='The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.' evidence='	for (elt in obj1) {'/>
<issue line='17' char='22' reason='Expected &apos;===&apos; and instead saw &apos;==&apos;.' evidence='	if (arguments.length == 1) {'/>
<issue line='19' char='29' reason='Expected &apos;===&apos; and instead saw &apos;==&apos;.' evidence='	} else if (arguments.length == 2) {'/>
<issue line='25' char='5' reason='&apos;clazz&apos; has not been fully defined yet.' evidence='		if (clazz.initializeExtend != null &amp;&amp; clazz.initializeExtend == true) {'/>
<issue line='25' char='28' reason='Expected &apos;!==&apos; and instead saw &apos;!=&apos;.' evidence='		if (clazz.initializeExtend != null &amp;&amp; clazz.initializeExtend == true) {'/>
<issue line='25' char='39' reason='&apos;clazz&apos; has not been fully defined yet.' evidence='		if (clazz.initializeExtend != null &amp;&amp; clazz.initializeExtend == true) {'/>
<issue line='25' char='62' reason='Expected &apos;===&apos; and instead saw &apos;==&apos;.' evidence='		if (clazz.initializeExtend != null &amp;&amp; clazz.initializeExtend == true) {'/>
<issue line='28' char='13' reason='Expected &apos;!==&apos; and instead saw &apos;!=&apos;.' evidence='		if (content != null &amp;&amp; content[&quot;initialize&quot;] != null) {'/>
<issue line='28' char='32' reason='[&apos;initialize&apos;] is better written in dot notation.' evidence='		if (content != null &amp;&amp; content[&quot;initialize&quot;] != null) {'/>
<issue line='28' char='46' reason='Expected &apos;!==&apos; and instead saw &apos;!=&apos;.' evidence='		if (content != null &amp;&amp; content[&quot;initialize&quot;] != null) {'/>
<issue line='29' char='9' reason='[&apos;initialize&apos;] is better written in dot notation.' evidence='			content[&quot;initialize&quot;].apply(this, arguments);'/>
<issue line='31' char='2' reason='Expected &apos;;&apos; and instead saw &apos;if&apos;.' evidence='	}'/>
<issue line='32' char='12' reason='Expected &apos;!==&apos; and instead saw &apos;!=&apos;.' evidence='	if (parent != null) {'/>
<issue line='39' char='17' reason='[&apos;callSuper&apos;] is better written in dot notation.' evidence='		clazz.prototype[&quot;callSuper&quot;] = function() {'/>
<issue line='39' char='40' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='		clazz.prototype[&quot;callSuper&quot;] = function() {'/>
<issue line='40' char='18' reason='[&apos;_initialize&apos;] is better written in dot notation.' evidence='			if (clazz.parent[&quot;_initialize&quot;] != null) {'/>
<issue line='40' char='33' reason='Expected &apos;!==&apos; and instead saw &apos;!=&apos;.' evidence='			if (clazz.parent[&quot;_initialize&quot;] != null) {'/>
<issue line='41' char='36' reason='[&apos;_initialize&apos;] is better written in dot notation.' evidence='				var superInitialize = clazz.parent[&quot;_initialize&quot;];'/>
<issue line='56' char='5' reason='Expected &apos;return&apos; at column 1, not column 5.' evidence='    return (new String(this.toLowerCase())'/>
<issue line='56' char='17' reason='Do not use String as a constructor.' evidence='    return (new String(this.toLowerCase())'/>
<issue line='57' char='14' reason='Expected &apos;===&apos; and instead saw &apos;==&apos;.' evidence='             == (new String(arg)).toLowerCase());'/>
<issue line='57' char='22' reason='Do not use String as a constructor.' evidence='             == (new String(arg)).toLowerCase());'/>
<issue line='60' char='25' reason='Expected &apos;===&apos; and instead saw &apos;==&apos;.' evidence='	return (this.toString() == arg.toString());'/>
<issue line='68' char='21' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='	initialize: function() {'/>
<issue line='71' char='30' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='	getClientDispatcher: function() {'/>
<issue line='74' char='30' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='	setClientDispatcher: function(clientDispatcher) {'/>
<issue line='80' char='21' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='	initialize: function(schemeName,name,technicalName,description,'/>
<issue line='80' char='33' reason='Missing space between &apos;,&apos; and &apos;name&apos;.' evidence='	initialize: function(schemeName,name,technicalName,description,'/>
<issue line='80' char='38' reason='Missing space between &apos;,&apos; and &apos;technicalName&apos;.' evidence='	initialize: function(schemeName,name,technicalName,description,'/>
<issue line='80' char='52' reason='Missing space between &apos;,&apos; and &apos;description&apos;.' evidence='	initialize: function(schemeName,name,technicalName,description,'/>
<issue line='81' char='13' reason='Missing space between &apos;,&apos; and &apos;confidential&apos;.' evidence='						defaultPort,confidential,version) {'/>
<issue line='81' char='26' reason='Missing space between &apos;,&apos; and &apos;version&apos;.' evidence='						defaultPort,confidential,version) {'/>
<issue line='85' char='9' reason='Expected &apos;this&apos; at column 1, not column 9.' evidence='        this.description = description;'/>
<issue line='86' char='9' reason='Expected &apos;this&apos; at column 1, not column 9.' evidence='        this.defaultPort = defaultPort;'/>
<issue line='87' char='9' reason='Expected &apos;this&apos; at column 1, not column 9.' evidence='        this.confidential = confidential;'/>
<issue line='88' char='9' reason='Expected &apos;this&apos; at column 1, not column 9.' evidence='        this.version = version;'/>
<issue line='95' char='5' reason='Expected &apos;HTTPS&apos; at column 1, not column 5.' evidence='    HTTPS: new Protocol(&quot;https&quot;, &quot;HTTPS&quot;, &quot;HTTP&quot;,'/>
<issue line='100' char='21' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='	initialize: function() {'/>
<issue line='113' char='21' reason='Missing space between &apos;length&apos; and &apos;==&apos;.' evidence='		if (arguments.length==1 &amp;&amp; arguments[0] instanceof MediaType) {'/>
<issue line='113' char='23' reason='Missing space between &apos;==&apos; and &apos;1&apos;.' evidence='		if (arguments.length==1 &amp;&amp; arguments[0] instanceof MediaType) {'/>
<issue line='113' char='21' reason='Expected &apos;===&apos; and instead saw &apos;==&apos;.' evidence='		if (arguments.length==1 &amp;&amp; arguments[0] instanceof MediaType) {'/>
<issue line='113' char='52' reason='&apos;MediaType&apos; is not defined.' evidence='		if (arguments.length==1 &amp;&amp; arguments[0] instanceof MediaType) {'/>
<issue line='117' char='32' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='	getAcceptedMediaTypes: function() {'/>
<issue line='123' char='21' reason='Expected exactly one space between &apos;function&apos; and &apos;(&apos;.' evidence='	initialize: function() {'/>
<issue line='124' char='4' reason='Mixed spaces and tabs.' evidence='    	this.attributes = {};'/>
<issue line='124' char='5' reason='Expected &apos;this&apos; at column 1, not column 5.' evidence='    	this.attributes = {};'/>
<issue line='124' char='5' reason='Too many errors. (4% scanned).' evidence=''/>
</file></jslint>